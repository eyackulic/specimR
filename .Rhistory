BiocManager::install('rhdf5')
library(kableExtra)
options(stringsAsFactors=F)
library(neonUtilities)
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("NIWO", "HARV"),
startdate="2018-06", enddate="2018-07",
savepath="./data",
check.size=F)
flux <- stackEddy(filepath="./data/filesToStack00200",
level="dp04")
names(flux)
knitr::kable(head(flux$NIWO))
term <- unlist(strsplit(names(flux$NIWO), split=".", fixed=T))
flux$objDesc[which(flux$objDesc$Object %in% term),]
knitr::kable(term)
knitr::kable(flux$variables)
timeB <- as.POSIXct(flux$NIWO$timeBgn,
format="%Y-%m-%dT%H:%M:%S",
tz="GMT")
flux$NIWO <- cbind(timeB, flux$NIWO)
plot(flux$NIWO$data.fluxCo2.nsae.flux~timeB,
pch=".", xlab="Date", ylab="CO2 flux",
xaxt="n")
axis.POSIXct(1, x=timeB, format="%Y-%m-%d")
plot(flux$NIWO$data.fluxCo2.nsae.flux~timeB,
pch=".", xlab="Date", ylab="CO2 flux",
xaxt="n")
axis.POSIXct(1, x=timeB, format="%Y-%m-%d")
plot(flux$NIWO$data.fluxCo2.nsae.flux~timeB,
pch=20, xlab="Date", ylab="CO2 flux",
xlim=c(as.POSIXct("2018-07-07", tz="GMT"),
as.POSIXct("2018-07-09", tz="GMT")),
ylim=c(-20,20), xaxt="n")
axis.POSIXct(1, x=timeB, format="%Y-%m-%d %H:%M:%S")
pr <- loadByProduct("DP1.00024.001", site="NIWO", avg=30,
startdate="2018-06", enddate="2018-07",
package="basic", check.size=F)
pr.top <- pr$PARPAR_30min[which(pr$PARPAR_30min$verticalPosition==
max(pr$PARPAR_30min$verticalPosition)),]
timeB <- pr.top$startDateTime
pr.top <- cbind(timeB, pr.top)
fx.pr <- merge(pr.top, flux$NIWO, by="timeB")
plot(fx.pr$data.fluxCo2.nsae.flux~fx.pr$PARMean,
pch=".", ylim=c(-20,20),
xlab="PAR", ylab="CO2 flux")
prof <- stackEddy(filepath="./data/filesToStack00200/",
level="dp03")
knitr::kable(head(prof$NIWO))
prof.l2 <- stackEddy(filepath="./data/filesToStack00200/",
level="dp02")
knitr::kable(head(prof.l2$HARV))
vars <- getVarsEddy("./data/filesToStack00200/NEON.D01.HARV.DP4.00200.001.nsae.2018-07.basic.h5")
knitr::kable(head(vars))
iso <- stackEddy(filepath="./data/filesToStack00200/",
level="dp01", var=c("rtioMoleDryCo2","rtioMoleDryH2o",
"dlta13CCo2","dlta18OH2o"), avg=30)
knitr::kable(head(iso$HARV))
iso.d <- iso$HARV[grep("2018-06-25", iso$HARV$timeBgn, fixed=T),]
iso.d <- iso.d[-which(is.na(as.numeric(iso.d$verticalPosition))),]
library(ggplot2)
g <- ggplot(iso.d, aes(y=verticalPosition)) +
geom_path(aes(x=data.co2Stor.rtioMoleDryCo2.mean,
group=timeBgn, col=timeBgn)) +
theme(legend.position="none") +
xlab("CO2") + ylab("Tower level")
g
knitr::include_graphics('./images/eddy_intro_50_1.png')
g <- ggplot(iso.d, aes(y=verticalPosition)) +
geom_path(aes(x=data.isoCo2.dlta13CCo2.mean,
group=timeBgn, col=timeBgn)) +
theme(legend.position="none") +
xlab("d13C") + ylab("Tower level")
g
devtools::install_github(repo="NEONScience/NEON-IS-data-processing",
ref="master",
subdir="pack/NEONprocIS.base",
dependencies=c(NA, TRUE)[2],
repos=c(BiocManager::repositories(),   # for dependencies on Bioconductor packages
"https://cran.rstudio.com/")       # for CRAN
)
devtools::install_github(repo="NEONScience/eddy4R",
ref="master",
subdir="pack/eddy4R.base",
dependencies=c(NA, TRUE)[2],
repos=c(BiocManager::repositories(),   # for dependencies on Bioconductor packages
"https://cran.rstudio.com/")       # for CRAN
)
packReq <- c("rhdf5", "eddy4R.base", "jsonlite", "lubridate")
lapply(packReq, function(x) {
print(x)
if(require(x, character.only = TRUE) == FALSE) {
install.packages(x)
library(x, character.only = TRUE)
}})
site <- "KONZ"
#"BARR","CLBJ","MLBS","DSNY","NIWO","ORNL","OSBS",
#"SCBI","LENO","TALL","CPER","BART","HARV","BLAN",
#"SERC","JERC","GUAN","LAJA","STEI","TREE","UNDE",
#"KONA","KONZ","UKFS","GRSM","DELA","DCFS","NOGP",
#"WOOD","RMNP","OAES","YELL","MOAB","STER","JORN",
#"SRER","ONAQ","ABBY","WREF","SJER","SOAP","TEAK",
#"TOOL","BONA","DEJU","HEAL","PUUM"
}
site <- "KONZ"
#define start and end dates, optional, defaults to entire period of site operation. Use %Y-%m-%d format.
dateBgn <- "2020-03-01"
dateEnd <- "2020-05-31"
# Data package from the portal
Pack <- c('basic','expanded')[1]
#The version data for the FP standard conversion processing
ver = paste0("v",format(Sys.time(), "%Y%m%dT%H%m"))
#download directory
DirDnld=tempdir()
#Output directory, change this to where you want to save the output csv
DirOutBase <-paste0("~/eddy/data/Ameriflux/",ver)
#DP number
dpID <- 'DP4.00200.001'
#Grab a list of all Ameriflux sites, containing site ID and site description
sites_web <- jsonlite::fromJSON("http://ameriflux-data.lbl.gov/AmeriFlux/SiteSearch.svc/SiteList/AmeriFlux")
#Grab only NEON sites
sitesNeon <- sites_web[grep(pattern = paste0("NEON.*",site), x = sites_web$SITE_NAME),] #For all NEON sites
siteNeon <- sites_web[grep(pattern = paste0("NEON.*",site), x = sites_web$SITE_NAME),]
metaSite <- lapply(siteNeon$SITE_ID, function(x) {
pathSite <- paste0("http://ameriflux-data.lbl.gov/BADM/Anc/SiteInfo/",x)
tmp <- fromJSON(pathSite)
return(tmp)
})
#use NEON ID as list name
names(metaSite) <- site
if(!exists("dateBgn") || is.na(dateBgn) || is.null(dateBgn)){
dateBgn <- as.Date(metaSite[[site]]$values$GRP_FLUX_MEASUREMENTS[[1]]$FLUX_MEASUREMENTS_DATE_START, "%Y%m%d")
} else {
dateBgn <- dateBgn
}#End of checks for missing dateBgn
#Check if dateEnd is defined, if not make it the system date
if(!exists("dateEnd") || is.na(dateEnd) || is.null(dateEnd)){
dateEnd <- as.Date(Sys.Date())
} else {
dateEnd <- dateEnd
}#End of checks for missing dateEnd
timeOfstUtc <- as.integer(metaSite[[site]]$values$GRP_UTC_OFFSET[[1]]$UTC_OFFSET)
setDate <- seq(from = as.Date(dateBgn), to = as.Date(dateEnd), by = "month")
msg <- paste0("Starting Ameriflux FP standard conversion processing workflow for ", site, " for ", dateBgn, " to ", dateEnd)
print(msg)
if(dir.exists(DirDnld) == FALSE) dir.create(DirDnld, recursive = TRUE)
#Append the site to the base output directory
DirOut <- paste0(DirOutBase, "/", siteNeon$SITE_ID)
#Check if directory exists and create if not
if(!dir.exists(DirOut)) dir.create(DirOut, recursive = TRUE)
#Initialize data List
dataList <- list()
#Read data from the API
dataList <- lapply(setDate, function(x) {
# year <- lubridate::year(x)
# mnth <- lubridate::month(x)
date <- stringr::str_extract(x, pattern = paste0("[0-9]{4}", "-", "[0-9]{2}"))
tryCatch(neonUtilities::zipsByProduct(dpID = dpID, site = site, startdate = date, enddate = date, package = "basic", savepath = DirDnld, check.size = FALSE), error=function(e) NULL)
files <- list.files(paste0(DirDnld, "/filesToStack00200"))
utils::unzip(paste0(DirDnld, "/filesToStack00200/", files[grep(pattern = paste0(site,".*.", date, ".*.zip"), x = files)]), exdir = paste0(DirDnld, "/filesToStack00200"))
files <- list.files(paste0(DirDnld, "/filesToStack00200"))
dataIdx <- rhdf5::h5read(file = paste0(DirDnld, "/filesToStack00200/", max(files[grep(pattern = paste0(site,".*.", date,".*.h5"), x = files)])), name = paste0(site, "/"))
if(!is.null(dataIdx)){
dataIdx$dp0p <- NULL
dataIdx$dp02 <- NULL
dataIdx$dp03 <- NULL
dataIdx$dp01$ucrt <- NULL
dataIdx$dp04$ucrt <- NULL
dataIdx$dp01$data <- lapply(dataIdx$dp01$data,FUN=function(var){
nameTmi <- names(var)
var <- var[grepl('_30m',nameTmi)]
return(var)})
dataIdx$dp01$qfqm <- lapply(dataIdx$dp01$qfqm,FUN=function(var){
nameTmi <- names(var)
var <- var[grepl('_30m',nameTmi)]
return(var)})
}
return(dataIdx)
})
names(dataList) <- paste0(lubridate::year(setDate),sprintf("%02d",lubridate::month(setDate)))
dataList <- dataList[vapply(dataList, Negate(is.null), NA)]
#Find the tower top level by looking at the vertical index of the turbulent CO2 concentration measurements
LvlTowr <- grep(pattern = "_30m", names(dataList[[1]]$dp01$data$co2Turb), value = TRUE)
LvlTowr <- gsub(x = LvlTowr, pattern = "_30m", replacement = "")
#get tower top level
LvlTop <- strsplit(LvlTowr,"")
LvlTop <- base::as.numeric(LvlTop[[1]][6])
#Ameriflux vertical levels based off of https://ameriflux.lbl.gov/data/aboutdata/data-variables/ section 3.3.1 "Indices must be in order, starting with the highest."
idxVerAmfx <- base::seq(from = 1, to = LvlTop, by = 1)
#get the sequence from top to first level
LvlMeas <- base::seq(from = LvlTop, to = 1, by = -1)
#Recreate NEON naming conventions
LvlMeas <- paste0("000_0",LvlMeas,"0",sep="")
#Give NEON naming conventions to Ameriflux vertical levels
names(idxVerAmfx) <- LvlMeas
#Ameriflux horizontal index
idxHorAmfx <- 1
dataListFlux <- lapply(names(dataList), function(x) {
data.frame(
"TIMESTAMP_START" = as.POSIXlt(dataList[[x]]$dp04$data$fluxCo2$turb$timeBgn, format="%Y-%m-%dT%H:%M:%OSZ", tz = "GMT"),
"TIMESTAMP_END" = as.POSIXlt(dataList[[x]]$dp04$data$fluxCo2$turb$timeEnd, format="%Y-%m-%dT%H:%M:%OSZ", tz = "GMT"),
# "TIMESTAMP_START" = strftime(as.POSIXlt(dataList[[x]][[idxSite]]$dp04$data$fluxCo2$turb$timeBgn, format="%Y-%m-%dT%H:%M:%OSZ"), format = "%Y%m%d%H%M"),
# "TIMESTAMP_END" = strftime(as.POSIXlt(dataList[[x]][[idxSite]]$dp04$data$fluxCo2$turb$timeEnd, format="%Y-%m-%dT%H:%M:%OSZ") + 60, format = "%Y%m%d%H%M"),
"FC"= dataList[[x]]$dp04$data$fluxCo2$turb$flux,
"SC"= dataList[[x]]$dp04$data$fluxCo2$stor$flux,
"NEE"= dataList[[x]]$dp04$data$fluxCo2$nsae$flux,
"LE" = dataList[[x]]$dp04$data$fluxH2o$turb$flux,
"SLE" = dataList[[x]]$dp04$data$fluxH2o$stor$flux,
"USTAR" = dataList[[x]]$dp04$data$fluxMome$turb$veloFric,
"H" = dataList[[x]]$dp04$data$fluxTemp$turb$flux,
"SH" = dataList[[x]]$dp04$data$fluxTemp$stor$flux,
"FETCH_90" = dataList[[x]]$dp04$data$foot$stat$distXaxs90,
"FETCH_MAX" = dataList[[x]]$dp04$data$foot$stat$distXaxsMax,
"V_SIGMA" = dataList[[x]]$dp04$data$foot$stat$veloYaxsHorSd,
#"W_SIGMA" = dataList[[x]]$dp04$data$foot$stat$veloZaxsHorSd,
"CO2_1_1_1" = dataList[[x]]$dp01$data$co2Turb[[paste0(LvlTowr,"_30m")]]$rtioMoleDryCo2$mean,
"H2O_1_1_1" = dataList[[x]]$dp01$data$h2oTurb[[paste0(LvlTowr,"_30m")]]$rtioMoleDryH2o$mean,
"qfFinlH2oTurbFrt00Samp" = dataList[[x]]$dp01$qfqm$h2oTurb[[paste0(LvlTowr,"_30m")]]$frt00Samp$qfFinl,
"qfH2O_1_1_1" = dataList[[x]]$dp01$qfqm$h2oTurb[[paste0(LvlTowr,"_30m")]]$rtioMoleDryH2o$qfFinl,
"qfCO2_1_1_1" = dataList[[x]]$dp01$qfqm$co2Turb[[paste0(LvlTowr,"_30m")]]$rtioMoleDryCo2$qfFinl,
"qfSC" = dataList[[x]]$dp04$qfqm$fluxCo2$stor$qfFinl,
"qfSLE" = dataList[[x]]$dp04$qfqm$fluxH2o$stor$qfFinl,
"qfSH" = dataList[[x]]$dp04$qfqm$fluxTemp$stor$qfFinl,
"qfT_SONIC" = dataList[[x]]$dp01$qfqm$soni[[paste0(LvlTowr,"_30m")]]$tempSoni$qfFinl,
"qfWS_1_1_1" = dataList[[x]]$dp01$qfqm$soni[[paste0(LvlTowr,"_30m")]]$veloXaxsYaxsErth$qfFinl,
rbind.data.frame(lapply(names(idxVerAmfx), function(y) {
tryCatch({rlog$debug(y)}, error=function(cond){print(y)})
rpt <- list()
rpt[[paste0("CO2_1_",idxVerAmfx[y],"_2")]] <- dataList[[x]]$dp01$data$co2Stor[[paste0(y,"_30m")]]$rtioMoleDryCo2$mean
rpt[[paste0("H2O_1_",idxVerAmfx[y],"_2")]] <- dataList[[x]]$dp01$data$h2oStor[[paste0(y,"_30m")]]$rtioMoleDryH2o$mean
rpt[[paste0("CO2_1_",idxVerAmfx[y],"_3")]] <- dataList[[x]]$dp01$data$isoCo2[[paste0(y,"_30m")]]$rtioMoleDryCo2$mean
rpt[[paste0("H2O_1_",idxVerAmfx[y],"_3")]] <- dataList[[x]]$dp01$data$isoCo2[[paste0(y,"_30m")]]$rtioMoleDryH2o$mean
rpt[[paste0("qfCO2_1_",idxVerAmfx[y],"_2")]] <- dataList[[x]]$dp01$qfqm$co2Stor[[paste0(LvlTowr,"_30m")]]$rtioMoleDryCo2$qfFinl
rpt[[paste0("qfH2O_1_",idxVerAmfx[y],"_2")]] <- dataList[[x]]$dp01$qfqm$h2oStor[[paste0(LvlTowr,"_30m")]]$rtioMoleDryH2o$qfFinl
rpt[[paste0("qfCO2_1_",idxVerAmfx[y],"_3")]] <- dataList[[x]]$dp01$qfqm$isoCo2[[paste0(LvlTowr,"_30m")]]$rtioMoleDryCo2$qfFinl
rpt[[paste0("qfH2O_1_",idxVerAmfx[y],"_3")]] <- dataList[[x]]$dp01$qfqm$isoH2o[[paste0(LvlTowr,"_30m")]]$rtioMoleDryH2o$qfFinl
rpt <- rbind.data.frame(rpt)
return(rpt)
}
)),
"WS_1_1_1" = dataList[[x]]$dp01$data$soni[[paste0(LvlTowr,"_30m")]]$veloXaxsYaxsErth$mean,
"WS_MAX_1_1_1" = dataList[[x]]$dp01$data$soni[[paste0(LvlTowr,"_30m")]]$veloXaxsYaxsErth$max,
"WD_1_1_1" = dataList[[x]]$dp01$data$soni[[paste0(LvlTowr,"_30m")]]$angZaxsErth$mean,
"T_SONIC" = dataList[[x]]$dp01$data$soni[[paste0(LvlTowr,"_30m")]]$tempSoni$mean,
"T_SONIC_SIGMA" = base::sqrt(dataList[[x]]$dp01$data$soni[[paste0(LvlTowr,"_30m")]]$tempSoni$mean)
, stringsAsFactors = FALSE)
})
names(dataListFlux) <- names(dataList)
dataDfFlux <- do.call(rbind.data.frame,dataListFlux)
rm(list=c("dataListFlux","dataList"))
gc()
timeRglr <- eddy4R.base::def.rglr(timeMeas = as.POSIXlt(dataDfFlux$TIMESTAMP_START), dataMeas = dataDfFlux, BgnRglr = as.POSIXlt(dataDfFlux$TIMESTAMP_START[1]), EndRglr = as.POSIXlt(dataDfFlux$TIMESTAMP_END[length(dataDfFlux$TIMESTAMP_END)]), TzRglr = "UTC", FreqRglr = 1/(60*30))
#Reassign data to data.frame
dataDfFlux <- timeRglr$dataRglr
#Format timestamps
dataDfFlux$TIMESTAMP_START <- strftime(timeRglr$timeRglr + lubridate::hours(timeOfstUtc), format = "%Y%m%d%H%M")
dataDfFlux$TIMESTAMP_END <- strftime(timeRglr$timeRglr + lubridate::hours(timeOfstUtc) + lubridate::minutes(30), format = "%Y%m%d%H%M")
#Remove co2Turb and h2oTurb data based off of qfFlow (qfFinl frt00)
dataDfFlux$FC[(which(dataDfFlux$qfCO2_1_1_1 == 1))] <- NaN
dataDfFlux$LE[(which(dataDfFlux$qfH2O_1_1_1 == 1))] <- NaN
dataDfFlux$USTAR[(which(dataDfFlux$qfWS_1_1_1 == 1))] <- NaN
dataDfFlux$H[(which(dataDfFlux$qfT_SONIC_1_1_1 == 1))] <- NaN
dataDfFlux$SC[(which(dataDfFlux$qfSC == 1))] <- NaN
dataDfFlux$SLE[(which(dataDfFlux$qfSLE == 1))] <- NaN
dataDfFlux$SH[(which(dataDfFlux$qfSH == 1))] <- NaN
dataDfFlux$T_SONIC[(which(dataDfFlux$qfT_SONIC_1_1_1 == 1))] <- NaN
dataDfFlux$T_SONIC_SIGMA[(which(dataDfFlux$qfT_SONIC_1_1_1 == 1))] <- NaN
dataDfFlux$WS_1_1_1[(which(dataDfFlux$qfWS_1_1_1 == 1))] <- NaN
dataDfFlux$WS_MAX_1_1_1[(which(dataDfFlux$qfWS_1_1_1 == 1))] <- NaN
dataDfFlux$WD_1_1_1[(which(dataDfFlux$qfWS_1_1_1 == 1))] <- NaN
dataDfFlux$H2O_1_1_1[(which(dataDfFlux$qfH2O_1_1_1 == 1))] <- NaN
dataDfFlux$CO2_1_1_1[(which(dataDfFlux$qfCO2_1_1_1 == 1))] <- NaN
lapply(idxVerAmfx, function(x){
#x <- 1
dataDfFlux[[paste0("H2O_1_",x,"_2")]][(which(dataDfFlux[[paste0("qfH2O_1_",x,"_2")]] == 1))] <<- NaN
dataDfFlux[[paste0("H2O_1_",x,"_3")]][(which(dataDfFlux[[paste0("qfH2O_1_",x,"_3")]] == 1))] <<- NaN
dataDfFlux[[paste0("CO2_1_",x,"_2")]][(which(dataDfFlux[[paste0("qfCO2_1_",x,"_2")]] == 1))] <<- NaN
dataDfFlux[[paste0("CO2_1_",x,"_3")]][(which(dataDfFlux[[paste0("qfCO2_1_",x,"_3")]] == 1))] <<- NaN
})
setIdxQf <- grep("qf", names(dataDfFlux))
dataDfFlux[,setIdxQf] <- NULL
#assign list
Rng <- list()
Rng$Min <- data.frame(
"FC" = -100,            #[umol m-2 s-1]
"SC" = -100,            #[umol m-2 s-1]
"NEE" = -100,            #[umol m-2 s-1]
"LE" = -500,            #[W m-2]
"H" = -500,             #[W m-2]
"USTAR" = 0,            #[m s-1]
"CO2" = 200,            #[umol mol-1]
"H2O" = 0,              #[mmol mol-1]
"WS_1_1_1" = 0,         #[m s-1]
"WS_MAX_1_1_1" = 0,     #[m s-1]
"WD_1_1_1" = -0.1,      #[deg]
"T_SONIC" = -55.0       #[C]
)
Rng$Max <- data.frame(
"FC" = 100,            #[umol m-2 s-1]
"SC" = 100,            #[umol m-2 s-1]
"NEE" = 100,            #[umol m-2 s-1]
"LE" = 1000,            #[W m-2]
"H" = 1000,             #[W m-2]
"USTAR" = 5,            #[m s-1]
"CO2" = 800,            #[umol mol-1]
"H2O" = 100,              #[mmol mol-1]
"WS_1_1_1" = 50,         #[m s-1]
"WS_MAX_1_1_1" = 50,     #[m s-1]
"WD_1_1_1" = 360,      #[deg]
"T_SONIC" = 45.0       #[C]
)
nameCO2 <- grep("CO2",names(dataDfFlux),value = TRUE)
nameH2O <- grep("H2O",names(dataDfFlux),value = TRUE)
#Apply the CO2/H2O threshold to all variables in HOR_VER_REP
Rng$Min[nameCO2] <- Rng$Min$CO2
Rng$Min[nameH2O] <- Rng$Min$H2O
Rng$Max[nameCO2] <- Rng$Max$CO2
Rng$Max[nameH2O] <- Rng$Max$H2O
#Apply the range test to the output, and replace values with NaN
lapply(names(dataDfFlux), function(x) {
dataDfFlux[which(dataDfFlux[,x]<Rng$Min[[x]] | dataDfFlux[,x]>Rng$Max[[x]]),x] <<- NaN})
# Delete any NEE that have either FC or SC removed
dataDfFlux[is.na(dataDfFlux$FC) | is.na(dataDfFlux$SC),"NEE"] <- NaN
#Change NA to -9999
dataDfFlux[is.na(dataDfFlux)] <- -9999
#Create output filename based off of Ameriflux file naming convention
nameFileOut <- base::paste0(DirOut,"/",siteNeon$SITE_ID,'_HH_',dataDfFlux$TIMESTAMP_START[1],'_',utils::tail(dataDfFlux$TIMESTAMP_END,n=1),'_flux.csv')
#Write output to .csv
write.csv(x = dataDfFlux, file = nameFileOut, row.names = FALSE)
rm(list="dataDfFlux")
gc()
library(faraway)
head(prostate)
lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=prostate)
X<- model.matrix(lpsa ~ ., data=prostate)
y<- prostate$lpsa
(bhat<- (XtXinv<-solve(crossprod(X))) %*% crossprod(X,y))
mod1 <- lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,data=prostate)
summary(bhat)
summary(mod1)
(bhat<- (XtXinv<-solve(crossprod(X))) %*% crossprod(X,y))
summary(mod1)
summary(mod1$coefficients=="age")
summary(mod1[mod1$coefficients=="age"])
mod1[mod1$coefficients=="age"]
seBage <- 0.011173
Bage <- -0.019637
tstat <- (Bage -0)/seBage
tstat
bhat <- coef(mod1)
bhat
(r <- pOmega - pomega)
pOmega <- 9 #8 variables + intercept
pomega <- 8 #reducing model to just look at age
(r <- pOmega - pomega)
Cmat <- matrix(c(0,0,0,1,0,0,0,0,0),nrow=r)
d <- rep(0,r)
gmodels::glh.test(reg=mod1,cm=cMat,d=d)
install.packages('gmodels')
gmodels::glh.test(reg=mod1,cm=cMat,d=d)
gmodels::glh.test(reg=mod1,cm=Cmat,d=d)
Cbhat <- Cmat %*%bhat
VCbhat <- Cmat%*%Vbhat%*%t(Cmat)
Vbhat <- mse *solve(xtx)
n <- length(y)
mse <- sum((y-x%*%bhat)^2)/(n-pOmega)
mse <- sum((y-X%*%bhat)^2)/(n-pOmega)
Vbhat <- mse *solve(XtXinv)
VCbhat <- Cmat%*%Vbhat%*%t(Cmat)
(F<- t(Cbhat-d)%*%solve(VCbhat)%*%(Cbhat-d) / r)
pf(q=F,df1=r,df2=n-pOmega, lower=FALSE)
VCbhat
sebArea <- sqrt(VCbhat[1,1])
sebAge <- sqrt(VCbhat[1,1])
(tstat<- (Cbhat - d) / sebAge)
tstat
tstat2 <- (Bage -0)/seBage
tstat2 <- (Bage -0)/seBage
tstat2
n
yhat
mse
Vbhat
XtXinv
(bhat<- (XtXinv<-solve(crossprod(X))) %*% crossprod(X,y))
XtXinv
(bhat<- (XtXinv<-solve(crossprod(X))) %*% crossprod(X,y))
H<- X%*%XtXinv%*%t(X)
sum(diag(H))
(Vbhat <- mse *XtXinv)
VCbhat <- Cmat%*%Vbhat%*%t(Cmat)
(F<- t(Cbhat-d)%*%solve(VCbhat)%*%(Cbhat-d) / r)
pf(q=F,df1=r,df2=n-pOmega, lower=FALSE)
sebAge <- sqrt(VCbhat[1,1])
(tstat<- (Cbhat - d) / sebAge)
#value from full model
#Bage <- -0.019637
#seBage <- 0.011173
#tstat2 <- (Bage -0)/seBage
tstat2
2*pt(q=abs(tstat), df=n-pOmega, lower=FALSE)
summary(mod1)
2*pt(q=abs(tstat), df=n-pOmega, lower=FALSE)
summary(mod1)
summary(mod1)
tcrit<- qt(0.975, 97-9) #df--observations - explanatory variables
tcrit
F(^-1)
F
F^(-1)
F^-1(0.975)
F^-1
(F^-1)(0.975)
(F^-1)*(0.975)
tcrit
Bage-tcrit*sebAge
Bage+tcrit*sebAge
Bage+c(-1,1)*tcrit*sebAge
confint(mod1)
confint(mod1, level=0.9)
summary(mod1)
-0.019637 +0.011173
-0.019637 -0.011173
p
confint(mod1, level=0.9)
confint(mod1)#confirms code for 1(g)
2*pt(q=abs(tstat), df=n-pOmega, lower=FALSE)
(tstat<- (Cbhat - d) / sebAge)
library(ellipse)
install.packages("ellipse")
library(ellipse)
c <- confint(mod1)
c(4,5)
c[c(4,5)]
c[c(4,5),]
mod1
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
abline(0,0)
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
points(0,0)
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
points(0,0,fill="black")
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
points(0,0,col="black")
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
points(0,0,col="red")
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
points(0,0,col="red",bg = "red")
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
points(0,0,col="red",bg = 21)
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
points(0,0,col="red",bg = "21")
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
points(0,0,col="red",pch = 21)
?points
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
points(0,0,pch = 19)
plot(ellipse(mod1,c(4,5),type="l",xlim=c(-1,0)))
abline(v=confint(mod1)[4,],lty=2)
abline(v=confint(mod1)[5,],lty=2)
points(0,0,pch = 19,col="red")
mod2 <- lm(happy~.,happy)
summary(mod2)
head(happy)
summary(mod2)
summary(mod2)
table(happy)
unique(happy$happy)
unique(happy$sex)
unique(happy$money)
unique(happy$love)
unique(happy$work)
lms <- (summary(mod2))
lms <- summary(mod2)
lms$fstatistic
1-pf(lms$fstatistic[1],lms$fstatistic[2],lms$fstatistic[3])
nreps <- 4000
fstats <- numeric(nreps)
set.seed(8675309)
for(i in 1:nreps){
lmods <- lm(sample(happy) ~ money, happy)
fstats[i] <- summary(lmods)$fstat[1]
}
mean(fstats > lms$fstat[1])
#########################
2510-380
2130/5
